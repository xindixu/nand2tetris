// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/*
    ixxaccccccdddjjj

    // 15 - i
    optcode: 
    0 = A-instruction
    1 = C-instruction

    // 12 - a
    0 = A-register
    1 = M-register

    // 11 - c1
    ALU zx: zero x input
    // 10 - c2
    ALU nx: negate x input
    // 9 - c3
    ALU zy: zero y input
    // 8 - c4
    ALU ny: negate y input
    // 7 - c5
    ALU f: 
    0 = And
    1 = Add
    // 6 - c6
    ALU no: negate the out output

    // 5 - d1
    A-register
    // 4 - d2
    D-register
    // 3 - d3
    M-register

    // 2 - j1
    JLT - less than 0  < 0 
    // 1 - j2
    JEQ - equal to 0   == 0
    // 0 - j3
    JGT - less than 0  > 0
*/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                         // A-instruction: 16-bit
                         // C-instruction: ixxacccccdddjjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


    // ======== A-register ========
    // Check if Anything should be saved to A
    // Save when: A-instruction or C-instruction with save to A-register bit
    // 15 - i: opt-code - 0 -> A-instruction
    Not(in=instruction[15], out=AInstruction);
    // 5 - d1: A-register 
    Or(a=AInstruction, b=instruction[5], out=storeA);

    // What to save to A
    // 15 - i: opt-code - 0 -> A-instruction
    // if A-instruction, instruction
    // else, ALUOutput
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=AInput);
    ARegister(in=AInput, load=storeA, out=ARegisterState);

    // ======== ALU ========
    // 12 - a: 0 -> A-register, 1 -> M-register
    Mux16(a=ARegisterState, b=inM, sel=instruction[12], out=AorMRegisterState);

    ALU(x=DRegisterState, y=AorMRegisterState, zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, 
    zr=zero, ng=negative, out=outM);

    // ======== D-register ========
    // Check if ALUOutput should be saved to D
    // 15 - i: opt-code - 1 -> c-instruction
    // 4 - d2: D-register
    And(a=instruction[15], b=instruction[4], out=storeD);
    DRegister(in=ALUOutput, load=storeD, out=DRegisterState);

    // ======== Memory ========
    // Should write and where to write?
    // Write when c-instruction with save to M-register bit
    // 15 - i: opt-code - 1 -> c-instruction
    // 3 - d3: M-register
    // Write to == ARegisterState
    And(a=instruction[15], b=instruction[3], out=writeM);
    And16(a=true, b=ARegisterState, out[0..14]=addressM);

    // ======== PC ========
    // Handle jump
    // Conditions
    Not(in=negative, out=positive);
    Not(in=zero, out=notZero);
    And(a=positive, b=notZero, out=positiveNotZero);

    // Jump when condition are met for either j1, j2, j3
    // case JGT (j3)   0 - j3
    And(a=instruction[15], b=instruction[0], out=JGT);
    And(a=positiveNotZero, b=JGT, out=j1);
    // case JEQ (j2)   1 - j2
    And(a=instruction[15], b=instruction[1], out=JEQ);
    And(a=zero, b=JEQ, out=j2);
    // case JLT (j1)   2 - j1
    And(a=instruction[15], b=instruction[2], out=JLT);
    And(a=negative, b=JLT, out=j3);

    Or(a=j1, b=j2, out=j1Orj2);
    Or(a=j3, b=j1Orj2, out=jump);
    
    PC(in=ARegisterState, load=jump, inc=true, reset=reset, out[0..14]=pc);
}